<!DOCTYPE html>
<html>

<head>
    <title><%= title %></title>
    <script src="/javascripts/jquery.min.js"></script>
    <script src="/javascripts/semantic.min.js"></script>
    <script src="/javascripts/wordcloud2.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/rxjs/6.3.2/rxjs.umd.js"></script>
    <link rel="shortcut icon" href="/images/dt.jpg" type="image/x-icon">
    <link rel="stylesheet" href="/stylesheets/styles.css">
    <link href="/stylesheets/semantic.min.css" rel="stylesheet" type="text/css">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.bundle.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/lodash/4.17.4/lodash.min.js"></script>
    <script type="module">

      const {
                Observable,
                Subject,
                ReplaySubject,
                from,
                of ,
                range, 
                fromEvent,
                timer,
        } = rxjs;

        const {
                map,
                filter,
                switchMap,
                scan,
                groupBy
        } = rxjs.operators;

        const tweetsObject = new Subject();
        var socket = io.connect('http://localhost:3000');
        
        socket.on('tweet', (data) =>{
          tweetsObject.next(data);
        })

        function start(){
          pushData(tweetsObject);
        }
        
        var gdata = [];
        function pushData(observable){
            observable.pipe(
                groupBy(tweet =>{ return tweet.text[1]}),
            ).subscribe(t =>{
                t.pipe(scan( (acc, curr)=>{acc.push(parseInt(curr.text[2])); return acc;}, [])).subscribe(v =>{
                  if (gdata.length == 6){
                    gdata = [];
                  }
                  gdata.push(v[0]);
                  gdata.flat(); 
                  updatechart(gdata);
                });
            })
        }
        
        function updatechart(datatweet0){
          var data = {
          datasets: [{
            data: datatweet0,
            label: "Liked",
            backgroundColor: "rgba(255, 99, 132,0.4)",
            borderColor: "rgba(255, 99, 132,1)"
          }, {
            data: [],
            label: "Retweets",
            backgroundColor: "rgba(151,205,187,0.4)",
            borderColor: "rgba(151,205,187,1)"
          }]
        };
          var ctx = document.getElementById("trumpLikechart")
            var myChart = new Chart(ctx, {
                          type: 'bar',
                          data: {
                              labels: ['Tweet1', 'Tweet2', 'Tweet3', 'Tweet4', 'Tweet5', 'Tweet6'],
                              datasets: [{
                                  label: 'Number Of Like',
                                  data: datatweet0,
                                  backgroundColor: [
                                      'rgba(255, 99, 132, 0.2)',
                                      'rgba(54, 162, 235, 0.2)',
                                      'rgba(255, 206, 86, 0.2)',
                                      'rgba(75, 192, 192, 0.2)',
                                      'rgba(153, 102, 255, 0.2)',
                                      'rgba(255, 159, 64, 0.2)'
                                  ],
                                  borderColor: [
                                      'rgba(255, 99, 132, 1)',
                                      'rgba(54, 162, 235, 1)',
                                      'rgba(255, 206, 86, 1)',
                                      'rgba(75, 192, 192, 1)',
                                      'rgba(153, 102, 255, 1)',
                                      'rgba(255, 159, 64, 1)'
                                  ],
                                  borderWidth: 1
                              }]
                          },
                          options: {
                              scales: {
                                  yAxes: [{
                                      ticks: {
                                          beginAtZero: true
                                      }
                                  }]
                              }
                          }
                      });
        }
        
        document.addEventListener('DOMContentLoaded', start);

    </script>
</head>

<body>
  <div class="ui fixed inverted menu">
    <div class="ui container">
      <a href="/" class="header item">
        <img class="logo" src="/images/hair.jpg">
        @realDonaldTrump
      </a>
      <a href="#" class="item">Home</a>
      <div class="ui simple dropdown item">
        Other Tacking Mode <i class="dropdown icon"></i>
        <div class="menu">
          <a class="item" href="/graph">Trump Twitter Tracking</a>
          
          <div class="divider"></div>
          <a class="item" href="/geo">Twitter Geo-Popularity Trakcing</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  
    <div class="ui main text container">
      <h1 class="ui header">Donald Trump Twitter Popularity Track</h1>
      <p>This is a basic fixed menu template using fixed size containers.</p>
      <p>A text container is used for the main container, which is useful for single column layouts</p>
      <!-- <img class="wireframe" src="images/trumpTwitter.png"> -->
        
      
      <!-- <div class="ui segment" style="height:550px; width:600px;">  -->
          <canvas id="trumpLikechart">
          </canvas>
      <!-- </div> -->
    </div>
    
  
</body>

</html>